#!/usr/bin/env python3
#
# toot_hugo_post - Read a hugo post and send a toot about it
#

import datetime
import re
import sys
from mastodon import Mastodon

# HUGO settings
WEBROOT = "/var/www"
HUGOCONF = "config.toml"

# Mastodon settings
ACCOUNT_NAME = "nlnogring"
ACCOUNT_EMAIL = "ring-admins@nlnog.net"
ACCOUNT_PASSWORD = "{{ mastodon_password }}"
TIMELINE_LOOKBACK=100
MSTDN_CLIENT_ID="{{ mastodon_client_id }}"
MSTDN_SECRET="{{ mastodon_secret }}"
MSTDN_SERVER = "https://mastodon.nl"
# Register your app! This only needs to be done once (per server, or when
# distributing rather than hosting an application, most likely per device and server).
# Uncomment the code and substitute in your information:
# Mastodon.create_app(
#     ACCOUNT_NAME,
#     api_base_url = MSTDN_SERVER,
#     to_file = 'mastodon.secret'
# )

# Misc settings
DEBUGFILE = "/tmp/toot_hugo_posts.log"

# Find the base url for a hugo installation
def h_base_url(webdir):
    try:
        f = open(webdir + '/' + HUGOCONF)
        for line in f.readlines():
            m = re.match('^baseURL = \"(.+)\"$',line)
            if m:
                return m.group(1)
        f.close()
    except:
        pass
    return None

# Derive the url of the hugo post from the path name
def h_post_url(pathname):
    m = re.match(WEBROOT + '/([^/]+)/content/(.+)\.md$',pathname)
    if m:
        base = h_base_url(WEBROOT + '/' + m.group(1))
        if base:
            return base + m.group(2) + '/'
    return None

# Parse a hugo post
def h_parse_post(pathname):
    post = {}
    try:
        f = open(pathname,'r')
        for line in f.readlines():
            m = re.match('^title = \"(.+)\"$',line)
            if m:
                post['title'] = m.group(1)
        post_url = h_post_url(pathname)
        if post_url:
            post['url'] = post_url
        f.close()
    except:
        pass
    return post

# Login on Mastodon
def m_login():
    try:
        mastodon = Mastodon(client_id=MSTDN_CLIENT_ID,
                            client_secret=MSTDN_SECRET,
                            api_base_url=MSTDN_SERVER,
                            user_agent=ACCOUNT_NAME)
        mastodon.log_in(ACCOUNT_EMAIL,ACCOUNT_PASSWORD)
    except:
        return False
    return mastodon

# Check if a toot containing a string has already been posted recently
def m_duplicate_toot(api,text):
    me = api.me()
    timeline = api.account_statuses(id=me['id'],limit=TIMELINE_LOOKBACK)
    if not timeline:
        return True
    for toot in timeline:
        if re.search(re.escape(text),toot['content']):
            return True
    return False

def m_send_toot(api,text):
    try:
        print("Tooting: {"+text+"}")
        api.toot(text)
    except:
        return False
    return True

def f_write_toot(text):
    try:
        f = open(DEBUGFILE,'a')
        print(datetime.datetime.now().isoformat()+": {"+text+"}",file=f)
        f.close()
    except:
        return False
    return True

if __name__ == "__main__":

    # Parse commandline
    if len(sys.argv) < 3:
        sys.stderr.write("%s [toot|debug] <pathname>\n" % (sys.argv[0]))
        sys.exit(1)
    action = sys.argv[1]
    pathname = sys.argv[2]

    # Process Hugo post
    post = h_parse_post(pathname)
    if not ('title' in post):
        sys.stderr.write("Unable to parse Hugo post.\n")
        sys.exit(2)
    if not ('url' in post):
        sys.stderr.write("Unable to derive post url.\n")
        sys.exit(2)

    # Send to Mastodon
    api = m_login()
    if not api:
        sys.stderr.write("Unable to connect to Mastodon.\n")
        sys.exit(2)
    if m_duplicate_toot(api,post['title']):
        sys.stderr.write("Duplicate toot or check failed; not posting.\n")
        sys.exit(2)
    toot_text = "New post: " + post['title'] + " " + post['url']
    if action == 'toot':
        if m_send_toot(api,toot_text):
            print("Toot sent.")
        else:
            sys.stderr.write("Unable to send toot.\n")
            sys.exit(2)
    elif action == 'debug':
        if f_write_toot(toot_text):
            print("Toot written to file.")
        else:
            sys.stderr.write("Unable to write toot to file.\n")
            sys.exit(2)
    else:
        sys.stderr.write("Unknown action %s.\n" % (action))
        sys.exit(2)
         
